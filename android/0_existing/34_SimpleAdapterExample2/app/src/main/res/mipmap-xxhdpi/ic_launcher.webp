/*
 * Copyright 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.android.material.circularreveal;

import static com.google.android.material.math.MathUtils.DEFAULT_EPSILON;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.Path.Direction;
import android.graphics.Rect;
import android.graphics.Shader.TileMode;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.os.Build.VERSION_CODES;
import android.view.View;
import androidx.annotation.ColorInt;
import androidx.annotation.IntDef;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo;
import com.google.android.material.math.MathUtils;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

/**
 * Helper class to implement circular reveal functionality.
 *
 * <p>A {@link CircularRevealWidget} subclass will call the corresponding method in this helper,
 * which contains the actual implementations for circular reveal. This helper communicates back to
 * the widget via the {@link Delegate}.
 */
public class CircularRevealHelper {

  private static final boolean DEBUG = false;

  /**
   * Delegate interface to be implemented by the {@link CircularRevealWidget} that owns this helper.
   */
  public interface Delegate {

    /**
     * Calls {@link View#draw(Canvas) super#draw(Canvas)}.
     *
     * <p>The delegate should override {@link View#draw(Canvas)} to call the corresponding method in
     * {@link CircularRevealHelper} if the helper is non-null.
     */
    void actualDraw(Canvas canvas);

    /**
     * Calls {@link View#isOpaque() super#isOpaque()}.
     *
     * <p>The delegate should override {@link View#isOpaque()} to call the corresponding method in
     * {@link CircularRevealHelper} if the helper is non-null.
     */
    boolean actualIsOpaque();
  }

  /**
   * Specify that this view should use a {@link BitmapShader} to create the circular reveal effect.
   * BitmapShader is supported in all APIs, but has the 